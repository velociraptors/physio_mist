#pragma once

#using <mscorlib.dll>
#using <System.dll>
#using <System.Data.dll>
#using <System.Xml.dll>

using namespace System::Security::Permissions;
[assembly:SecurityPermissionAttribute(SecurityAction::RequestMinimum, SkipVerification=false)];
// 
// This source code was auto-generated by xsd, Version=2.0.50727.42.
// 
namespace HumanGUI {
    
    using namespace System;
    ref class model_schema;
    
    
    /// <summary>
///Represents a strongly typed in-memory cache of data.
///</summary>
    [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
    System::Serializable, 
    System::ComponentModel::DesignerCategoryAttribute(L"code"), 
    System::ComponentModel::ToolboxItem(true), 
    System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedDataSetSchema"), 
    System::Xml::Serialization::XmlRootAttribute(L"model_schema"), 
    System::ComponentModel::Design::HelpKeywordAttribute(L"vs.data.DataSet")]
    public ref class model_schema : public ::System::Data::DataSet {
        public : ref class modelDataTable;
        public : ref class variableDataTable;
        public : ref class anatomical_structureDataTable;
        public : ref class modelRow;
        public : ref class variableRow;
        public : ref class anatomical_structureRow;
        public : ref class modelRowChangeEvent;
        public : ref class variableRowChangeEvent;
        public : ref class anatomical_structureRowChangeEvent;
        
        private: HumanGUI::model_schema::modelDataTable^  tablemodel;
        
        private: HumanGUI::model_schema::variableDataTable^  tablevariable;
        
        private: HumanGUI::model_schema::anatomical_structureDataTable^  tableanatomical_structure;
        
        private: ::System::Data::DataRelation^  relationmodel_variable;
        
        private: ::System::Data::DataRelation^  relationvariable_anatomical_structure;
        
        private: ::System::Data::SchemaSerializationMode _schemaSerializationMode;
        
        public : delegate System::Void modelRowChangeEventHandler(::System::Object^  sender, HumanGUI::model_schema::modelRowChangeEvent^  e);
        
        public : delegate System::Void variableRowChangeEventHandler(::System::Object^  sender, HumanGUI::model_schema::variableRowChangeEvent^  e);
        
        public : delegate System::Void anatomical_structureRowChangeEventHandler(::System::Object^  sender, HumanGUI::model_schema::anatomical_structureRowChangeEvent^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        model_schema();
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        model_schema(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property HumanGUI::model_schema::modelDataTable^  model {
            HumanGUI::model_schema::modelDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property HumanGUI::model_schema::variableDataTable^  variable {
            HumanGUI::model_schema::variableDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::Browsable(false), 
        System::ComponentModel::DesignerSerializationVisibility(::System::ComponentModel::DesignerSerializationVisibility::Content)]
        property HumanGUI::model_schema::anatomical_structureDataTable^  anatomical_structure {
            HumanGUI::model_schema::anatomical_structureDataTable^  get();
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::BrowsableAttribute(true), 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Visible)]
        virtual property ::System::Data::SchemaSerializationMode SchemaSerializationMode {
            ::System::Data::SchemaSerializationMode get() override;
            System::Void set(::System::Data::SchemaSerializationMode value) override;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataTableCollection^  Tables {
            ::System::Data::DataTableCollection^  get() new;
        }
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
        System::ComponentModel::DesignerSerializationVisibilityAttribute(::System::ComponentModel::DesignerSerializationVisibility::Hidden)]
        property ::System::Data::DataRelationCollection^  Relations {
            ::System::Data::DataRelationCollection^  get() new;
        }
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void InitializeDerivedDataSet() override;
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Data::DataSet^  Clone() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeTables() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Boolean ShouldSerializeRelations() override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Void ReadXmlSerializable(::System::Xml::XmlReader^  reader) override;
        
        protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        virtual ::System::Xml::Schema::XmlSchema^  GetSchemaSerializable() override;
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars();
        
        internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitVars(::System::Boolean initTable);
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void InitClass();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializemodel();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializevariable();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Boolean ShouldSerializeanatomical_structure();
        
        private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        ::System::Void SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e);
        
        public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
        static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        
        /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class modelDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnmodel_name;
            
            private: ::System::Data::DataColumn^  columndescription;
            
            private: ::System::Data::DataColumn^  columnmodel_Id;
            
            public: event HumanGUI::model_schema::modelRowChangeEventHandler^  modelRowChanging;
            
            public: event HumanGUI::model_schema::modelRowChangeEventHandler^  modelRowChanged;
            
            public: event HumanGUI::model_schema::modelRowChangeEventHandler^  modelRowDeleting;
            
            public: event HumanGUI::model_schema::modelRowChangeEventHandler^  modelRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            modelDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            modelDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            modelDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  model_nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  descriptionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  model_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property HumanGUI::model_schema::modelRow^  default [::System::Int32 ] {
                HumanGUI::model_schema::modelRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddmodelRow(HumanGUI::model_schema::modelRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            HumanGUI::model_schema::modelRow^  AddmodelRow(System::String^  model_name, System::String^  description);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            HumanGUI::model_schema::modelRow^  NewmodelRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovemodelRow(HumanGUI::model_schema::modelRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class variableDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnconstant;
            
            private: ::System::Data::DataColumn^  columntype;
            
            private: ::System::Data::DataColumn^  columnname;
            
            private: ::System::Data::DataColumn^  columnformula;
            
            private: ::System::Data::DataColumn^  column_value;
            
            private: ::System::Data::DataColumn^  columnunits;
            
            private: ::System::Data::DataColumn^  columndescription;
            
            private: ::System::Data::DataColumn^  columnvariable_Id;
            
            private: ::System::Data::DataColumn^  columnmodel_Id;
            
            public: event HumanGUI::model_schema::variableRowChangeEventHandler^  variableRowChanging;
            
            public: event HumanGUI::model_schema::variableRowChangeEventHandler^  variableRowChanged;
            
            public: event HumanGUI::model_schema::variableRowChangeEventHandler^  variableRowDeleting;
            
            public: event HumanGUI::model_schema::variableRowChangeEventHandler^  variableRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            variableDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            variableDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            variableDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  constantColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  typeColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  formulaColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  _valueColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  unitsColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  descriptionColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  variable_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  model_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property HumanGUI::model_schema::variableRow^  default [::System::Int32 ] {
                HumanGUI::model_schema::variableRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void AddvariableRow(HumanGUI::model_schema::variableRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            HumanGUI::model_schema::variableRow^  AddvariableRow(
                        System::Boolean constant, 
                        System::String^  type, 
                        System::String^  name, 
                        System::String^  formula, 
                        System::Single _value, 
                        System::String^  units, 
                        System::String^  description, 
                        HumanGUI::model_schema::modelRow^  parentmodelRowBymodel_variable);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            HumanGUI::model_schema::variableRow^  NewvariableRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void RemovevariableRow(HumanGUI::model_schema::variableRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        /// <summary>
///Represents the strongly named DataTable class.
///</summary>
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0"), 
        System::Serializable, 
        System::Xml::Serialization::XmlSchemaProviderAttribute(L"GetTypedTableSchema")]
        ref class anatomical_structureDataTable : public ::System::Data::DataTable, public ::System::Collections::IEnumerable {
            
            private: ::System::Data::DataColumn^  columnFMAID;
            
            private: ::System::Data::DataColumn^  columnstr_name;
            
            private: ::System::Data::DataColumn^  columnvariable_Id;
            
            public: event HumanGUI::model_schema::anatomical_structureRowChangeEventHandler^  anatomical_structureRowChanging;
            
            public: event HumanGUI::model_schema::anatomical_structureRowChangeEventHandler^  anatomical_structureRowChanged;
            
            public: event HumanGUI::model_schema::anatomical_structureRowChangeEventHandler^  anatomical_structureRowDeleting;
            
            public: event HumanGUI::model_schema::anatomical_structureRowChangeEventHandler^  anatomical_structureRowDeleted;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            anatomical_structureDataTable();
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            anatomical_structureDataTable(::System::Data::DataTable^  table);
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            anatomical_structureDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  FMAIDColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  str_nameColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataColumn^  variable_IdColumn {
                ::System::Data::DataColumn^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute, 
            System::ComponentModel::Browsable(false)]
            property ::System::Int32 Count {
                ::System::Int32 get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property HumanGUI::model_schema::anatomical_structureRow^  default [::System::Int32 ] {
                HumanGUI::model_schema::anatomical_structureRow^  get(::System::Int32 index);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Addanatomical_structureRow(HumanGUI::model_schema::anatomical_structureRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            HumanGUI::model_schema::anatomical_structureRow^  Addanatomical_structureRow(System::Int32 FMAID, System::String^  str_name, 
                        HumanGUI::model_schema::variableRow^  parentvariableRowByvariable_anatomical_structure);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Collections::IEnumerator^  GetEnumerator();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  Clone() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataTable^  CreateInstance() override;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitVars();
            
            private: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void InitClass();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            HumanGUI::model_schema::anatomical_structureRow^  Newanatomical_structureRow();
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Data::DataRow^  NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Type^  GetRowType() override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) override;
            
            protected: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            virtual ::System::Void OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) override;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Removeanatomical_structureRow(HumanGUI::model_schema::anatomical_structureRow^  row);
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            static ::System::Xml::Schema::XmlSchemaComplexType^  GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs);
        };
        
        /// <summary>
///Represents strongly named DataRow class.
///</summary>
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class modelRow : public ::System::Data::DataRow {
            
            private: HumanGUI::model_schema::modelDataTable^  tablemodel;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            modelRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  model_name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  description {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 model_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< HumanGUI::model_schema::variableRow^  >^  GetvariableRows();
        };
        
        /// <summary>
///Represents strongly named DataRow class.
///</summary>
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class variableRow : public ::System::Data::DataRow {
            
            private: HumanGUI::model_schema::variableDataTable^  tablevariable;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            variableRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Boolean constant {
                System::Boolean get();
                System::Void set(System::Boolean value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  type {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  formula {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Single _value {
                System::Single get();
                System::Void set(System::Single value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  units {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  description {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 variable_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 model_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property HumanGUI::model_schema::modelRow^  modelRow {
                HumanGUI::model_schema::modelRow^  get();
                System::Void set(HumanGUI::model_schema::modelRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IstypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SettypeNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsunitsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetunitsNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean IsdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void SetdescriptionNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Ismodel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setmodel_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            cli::array< HumanGUI::model_schema::anatomical_structureRow^  >^  Getanatomical_structureRows();
        };
        
        /// <summary>
///Represents strongly named DataRow class.
///</summary>
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class anatomical_structureRow : public ::System::Data::DataRow {
            
            private: HumanGUI::model_schema::anatomical_structureDataTable^  tableanatomical_structure;
            
            internal: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            anatomical_structureRow(::System::Data::DataRowBuilder^  rb);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 FMAID {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::String^  str_name {
                System::String^  get();
                System::Void set(System::String^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property System::Int32 variable_Id {
                System::Int32 get();
                System::Void set(System::Int32 value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property HumanGUI::model_schema::variableRow^  variableRow {
                HumanGUI::model_schema::variableRow^  get();
                System::Void set(HumanGUI::model_schema::variableRow^  value);
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Boolean Isvariable_IdNull();
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            ::System::Void Setvariable_IdNull();
        };
        
        /// <summary>
///Row event argument class
///</summary>
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class modelRowChangeEvent : public ::System::EventArgs {
            
            private: HumanGUI::model_schema::modelRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            modelRowChangeEvent(HumanGUI::model_schema::modelRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property HumanGUI::model_schema::modelRow^  Row {
                HumanGUI::model_schema::modelRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        /// <summary>
///Row event argument class
///</summary>
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class variableRowChangeEvent : public ::System::EventArgs {
            
            private: HumanGUI::model_schema::variableRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            variableRowChangeEvent(HumanGUI::model_schema::variableRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property HumanGUI::model_schema::variableRow^  Row {
                HumanGUI::model_schema::variableRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
        
        /// <summary>
///Row event argument class
///</summary>
        public : [System::CodeDom::Compiler::GeneratedCodeAttribute(L"System.Data.Design.TypedDataSetGenerator", L"2.0.0.0")]
        ref class anatomical_structureRowChangeEvent : public ::System::EventArgs {
            
            private: HumanGUI::model_schema::anatomical_structureRow^  eventRow;
            
            private: ::System::Data::DataRowAction eventAction;
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            anatomical_structureRowChangeEvent(HumanGUI::model_schema::anatomical_structureRow^  row, ::System::Data::DataRowAction action);
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property HumanGUI::model_schema::anatomical_structureRow^  Row {
                HumanGUI::model_schema::anatomical_structureRow^  get();
            }
            
            public: [System::Diagnostics::DebuggerNonUserCodeAttribute]
            property ::System::Data::DataRowAction Action {
                ::System::Data::DataRowAction get();
            }
        };
    };
}
namespace HumanGUI {
    
    
    inline model_schema::model_schema() {
        this->BeginInit();
        this->InitClass();
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &HumanGUI::model_schema::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        __super::Relations->CollectionChanged += schemaChangedHandler;
        this->EndInit();
    }
    
    inline model_schema::model_schema(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataSet(info, context, false) {
        if (this->IsBinarySerialized(info, context) == true) {
            this->InitVars(false);
            ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler1 = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &HumanGUI::model_schema::SchemaChanged);
            this->Tables->CollectionChanged += schemaChangedHandler1;
            this->Relations->CollectionChanged += schemaChangedHandler1;
            return;
        }
        ::System::String^  strSchema = (cli::safe_cast<::System::String^  >(info->GetValue(L"XmlSchema", ::System::String::typeid)));
        if (this->DetermineSchemaSerializationMode(info, context) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
            if (ds->Tables[L"model"] != nullptr) {
                __super::Tables->Add((gcnew HumanGUI::model_schema::modelDataTable(ds->Tables[L"model"])));
            }
            if (ds->Tables[L"variable"] != nullptr) {
                __super::Tables->Add((gcnew HumanGUI::model_schema::variableDataTable(ds->Tables[L"variable"])));
            }
            if (ds->Tables[L"anatomical_structure"] != nullptr) {
                __super::Tables->Add((gcnew HumanGUI::model_schema::anatomical_structureDataTable(ds->Tables[L"anatomical_structure"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXmlSchema((gcnew ::System::Xml::XmlTextReader((gcnew ::System::IO::StringReader(strSchema)))));
        }
        this->GetSerializationData(info, context);
        ::System::ComponentModel::CollectionChangeEventHandler^  schemaChangedHandler = gcnew ::System::ComponentModel::CollectionChangeEventHandler(this, &HumanGUI::model_schema::SchemaChanged);
        __super::Tables->CollectionChanged += schemaChangedHandler;
        this->Relations->CollectionChanged += schemaChangedHandler;
    }
    
    inline HumanGUI::model_schema::modelDataTable^  model_schema::model::get() {
        return this->tablemodel;
    }
    
    inline HumanGUI::model_schema::variableDataTable^  model_schema::variable::get() {
        return this->tablevariable;
    }
    
    inline HumanGUI::model_schema::anatomical_structureDataTable^  model_schema::anatomical_structure::get() {
        return this->tableanatomical_structure;
    }
    
    inline ::System::Data::SchemaSerializationMode model_schema::SchemaSerializationMode::get() {
        return this->_schemaSerializationMode;
    }
    inline System::Void model_schema::SchemaSerializationMode::set(::System::Data::SchemaSerializationMode value) {
        this->_schemaSerializationMode = __identifier(value);
    }
    
    inline ::System::Data::DataTableCollection^  model_schema::Tables::get() {
        return __super::Tables;
    }
    
    inline ::System::Data::DataRelationCollection^  model_schema::Relations::get() {
        return __super::Relations;
    }
    
    inline ::System::Void model_schema::InitializeDerivedDataSet() {
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline ::System::Data::DataSet^  model_schema::Clone() {
        HumanGUI::model_schema^  cln = (cli::safe_cast<HumanGUI::model_schema^  >(__super::Clone()));
        cln->InitVars();
        cln->SchemaSerializationMode = this->SchemaSerializationMode;
        return cln;
    }
    
    inline ::System::Boolean model_schema::ShouldSerializeTables() {
        return false;
    }
    
    inline ::System::Boolean model_schema::ShouldSerializeRelations() {
        return false;
    }
    
    inline ::System::Void model_schema::ReadXmlSerializable(::System::Xml::XmlReader^  reader) {
        if (this->DetermineSchemaSerializationMode(reader) == ::System::Data::SchemaSerializationMode::IncludeSchema) {
            this->Reset();
            ::System::Data::DataSet^  ds = (gcnew ::System::Data::DataSet());
            ds->ReadXml(reader);
            if (ds->Tables[L"model"] != nullptr) {
                __super::Tables->Add((gcnew HumanGUI::model_schema::modelDataTable(ds->Tables[L"model"])));
            }
            if (ds->Tables[L"variable"] != nullptr) {
                __super::Tables->Add((gcnew HumanGUI::model_schema::variableDataTable(ds->Tables[L"variable"])));
            }
            if (ds->Tables[L"anatomical_structure"] != nullptr) {
                __super::Tables->Add((gcnew HumanGUI::model_schema::anatomical_structureDataTable(ds->Tables[L"anatomical_structure"])));
            }
            this->DataSetName = ds->DataSetName;
            this->Prefix = ds->Prefix;
            this->Namespace = ds->Namespace;
            this->Locale = ds->Locale;
            this->CaseSensitive = ds->CaseSensitive;
            this->EnforceConstraints = ds->EnforceConstraints;
            this->Merge(ds, false, ::System::Data::MissingSchemaAction::Add);
            this->InitVars();
        }
        else {
            this->ReadXml(reader);
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchema^  model_schema::GetSchemaSerializable() {
        ::System::IO::MemoryStream^  stream = (gcnew ::System::IO::MemoryStream());
        this->WriteXmlSchema((gcnew ::System::Xml::XmlTextWriter(stream, nullptr)));
        stream->Position = 0;
        return ::System::Xml::Schema::XmlSchema::Read((gcnew ::System::Xml::XmlTextReader(stream)), nullptr);
    }
    
    inline ::System::Void model_schema::InitVars() {
        this->InitVars(true);
    }
    
    inline ::System::Void model_schema::InitVars(::System::Boolean initTable) {
        this->tablemodel = (cli::safe_cast<HumanGUI::model_schema::modelDataTable^  >(__super::Tables[L"model"]));
        if (initTable == true) {
            if (this->tablemodel != nullptr) {
                this->tablemodel->InitVars();
            }
        }
        this->tablevariable = (cli::safe_cast<HumanGUI::model_schema::variableDataTable^  >(__super::Tables[L"variable"]));
        if (initTable == true) {
            if (this->tablevariable != nullptr) {
                this->tablevariable->InitVars();
            }
        }
        this->tableanatomical_structure = (cli::safe_cast<HumanGUI::model_schema::anatomical_structureDataTable^  >(__super::Tables[L"anatomical_structure"]));
        if (initTable == true) {
            if (this->tableanatomical_structure != nullptr) {
                this->tableanatomical_structure->InitVars();
            }
        }
        this->relationmodel_variable = this->Relations[L"model_variable"];
        this->relationvariable_anatomical_structure = this->Relations[L"variable_anatomical_structure"];
    }
    
    inline ::System::Void model_schema::InitClass() {
        this->DataSetName = L"model_schema";
        this->Prefix = L"";
        this->Namespace = L"http://tempuri.org/model_schema.xsd";
        this->Locale = (gcnew ::System::Globalization::CultureInfo(L""));
        this->EnforceConstraints = true;
        this->SchemaSerializationMode = ::System::Data::SchemaSerializationMode::IncludeSchema;
        this->tablemodel = (gcnew HumanGUI::model_schema::modelDataTable());
        __super::Tables->Add(this->tablemodel);
        this->tablevariable = (gcnew HumanGUI::model_schema::variableDataTable());
        __super::Tables->Add(this->tablevariable);
        this->tableanatomical_structure = (gcnew HumanGUI::model_schema::anatomical_structureDataTable());
        __super::Tables->Add(this->tableanatomical_structure);
        ::System::Data::ForeignKeyConstraint^  fkc;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"model_variable", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemodel->model_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevariable->model_IdColumn}));
        this->tablevariable->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        fkc = (gcnew ::System::Data::ForeignKeyConstraint(L"variable_anatomical_structure", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevariable->variable_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableanatomical_structure->variable_IdColumn}));
        this->tableanatomical_structure->Constraints->Add(fkc);
        fkc->AcceptRejectRule = ::System::Data::AcceptRejectRule::None;
        fkc->DeleteRule = ::System::Data::Rule::Cascade;
        fkc->UpdateRule = ::System::Data::Rule::Cascade;
        this->relationmodel_variable = (gcnew ::System::Data::DataRelation(L"model_variable", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablemodel->model_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevariable->model_IdColumn}, false));
        this->relationmodel_variable->Nested = true;
        this->Relations->Add(this->relationmodel_variable);
        this->relationvariable_anatomical_structure = (gcnew ::System::Data::DataRelation(L"variable_anatomical_structure", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tablevariable->variable_IdColumn}, 
            gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->tableanatomical_structure->variable_IdColumn}, false));
        this->relationvariable_anatomical_structure->Nested = true;
        this->Relations->Add(this->relationvariable_anatomical_structure);
    }
    
    inline ::System::Boolean model_schema::ShouldSerializemodel() {
        return false;
    }
    
    inline ::System::Boolean model_schema::ShouldSerializevariable() {
        return false;
    }
    
    inline ::System::Boolean model_schema::ShouldSerializeanatomical_structure() {
        return false;
    }
    
    inline ::System::Void model_schema::SchemaChanged(::System::Object^  sender, ::System::ComponentModel::CollectionChangeEventArgs^  e) {
        if (e->Action == ::System::ComponentModel::CollectionChangeAction::Remove) {
            this->InitVars();
        }
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  model_schema::GetTypedDataSetSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        HumanGUI::model_schema^  ds = (gcnew HumanGUI::model_schema());
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        ::System::Xml::Schema::XmlSchemaAny^  any = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any->Namespace = ds->Namespace;
        sequence->Items->Add(any);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline model_schema::modelDataTable::modelDataTable() {
        this->TableName = L"model";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline model_schema::modelDataTable::modelDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline model_schema::modelDataTable::modelDataTable(::System::Runtime::Serialization::SerializationInfo^  info, ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  model_schema::modelDataTable::model_nameColumn::get() {
        return this->columnmodel_name;
    }
    
    inline ::System::Data::DataColumn^  model_schema::modelDataTable::descriptionColumn::get() {
        return this->columndescription;
    }
    
    inline ::System::Data::DataColumn^  model_schema::modelDataTable::model_IdColumn::get() {
        return this->columnmodel_Id;
    }
    
    inline ::System::Int32 model_schema::modelDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline HumanGUI::model_schema::modelRow^  model_schema::modelDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<HumanGUI::model_schema::modelRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void model_schema::modelDataTable::AddmodelRow(HumanGUI::model_schema::modelRow^  row) {
        this->Rows->Add(row);
    }
    
    inline HumanGUI::model_schema::modelRow^  model_schema::modelDataTable::AddmodelRow(System::String^  model_name, System::String^  description) {
        HumanGUI::model_schema::modelRow^  rowmodelRow = (cli::safe_cast<HumanGUI::model_schema::modelRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {model_name, description, 
            nullptr};
        rowmodelRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowmodelRow);
        return rowmodelRow;
    }
    
    inline ::System::Collections::IEnumerator^  model_schema::modelDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  model_schema::modelDataTable::Clone() {
        HumanGUI::model_schema::modelDataTable^  cln = (cli::safe_cast<HumanGUI::model_schema::modelDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  model_schema::modelDataTable::CreateInstance() {
        return (gcnew HumanGUI::model_schema::modelDataTable());
    }
    
    inline ::System::Void model_schema::modelDataTable::InitVars() {
        this->columnmodel_name = __super::Columns[L"model_name"];
        this->columndescription = __super::Columns[L"description"];
        this->columnmodel_Id = __super::Columns[L"model_Id"];
    }
    
    inline ::System::Void model_schema::modelDataTable::InitClass() {
        this->columnmodel_name = (gcnew ::System::Data::DataColumn(L"model_name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnmodel_name);
        this->columndescription = (gcnew ::System::Data::DataColumn(L"description", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columndescription);
        this->columnmodel_Id = (gcnew ::System::Data::DataColumn(L"model_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnmodel_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnmodel_Id}, 
                true)));
        this->columnmodel_name->AllowDBNull = false;
        this->columnmodel_Id->AutoIncrement = true;
        this->columnmodel_Id->AllowDBNull = false;
        this->columnmodel_Id->Unique = true;
    }
    
    inline HumanGUI::model_schema::modelRow^  model_schema::modelDataTable::NewmodelRow() {
        return (cli::safe_cast<HumanGUI::model_schema::modelRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  model_schema::modelDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew HumanGUI::model_schema::modelRow(builder));
    }
    
    inline ::System::Type^  model_schema::modelDataTable::GetRowType() {
        return HumanGUI::model_schema::modelRow::typeid;
    }
    
    inline ::System::Void model_schema::modelDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->modelRowChanged(this, (gcnew HumanGUI::model_schema::modelRowChangeEvent((cli::safe_cast<HumanGUI::model_schema::modelRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void model_schema::modelDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->modelRowChanging(this, (gcnew HumanGUI::model_schema::modelRowChangeEvent((cli::safe_cast<HumanGUI::model_schema::modelRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void model_schema::modelDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->modelRowDeleted(this, (gcnew HumanGUI::model_schema::modelRowChangeEvent((cli::safe_cast<HumanGUI::model_schema::modelRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void model_schema::modelDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->modelRowDeleting(this, (gcnew HumanGUI::model_schema::modelRowChangeEvent((cli::safe_cast<HumanGUI::model_schema::modelRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void model_schema::modelDataTable::RemovemodelRow(HumanGUI::model_schema::modelRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  model_schema::modelDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        HumanGUI::model_schema^  ds = (gcnew HumanGUI::model_schema());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"modelDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline model_schema::variableDataTable::variableDataTable() {
        this->TableName = L"variable";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline model_schema::variableDataTable::variableDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline model_schema::variableDataTable::variableDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  model_schema::variableDataTable::constantColumn::get() {
        return this->columnconstant;
    }
    
    inline ::System::Data::DataColumn^  model_schema::variableDataTable::typeColumn::get() {
        return this->columntype;
    }
    
    inline ::System::Data::DataColumn^  model_schema::variableDataTable::nameColumn::get() {
        return this->columnname;
    }
    
    inline ::System::Data::DataColumn^  model_schema::variableDataTable::formulaColumn::get() {
        return this->columnformula;
    }
    
    inline ::System::Data::DataColumn^  model_schema::variableDataTable::_valueColumn::get() {
        return this->column_value;
    }
    
    inline ::System::Data::DataColumn^  model_schema::variableDataTable::unitsColumn::get() {
        return this->columnunits;
    }
    
    inline ::System::Data::DataColumn^  model_schema::variableDataTable::descriptionColumn::get() {
        return this->columndescription;
    }
    
    inline ::System::Data::DataColumn^  model_schema::variableDataTable::variable_IdColumn::get() {
        return this->columnvariable_Id;
    }
    
    inline ::System::Data::DataColumn^  model_schema::variableDataTable::model_IdColumn::get() {
        return this->columnmodel_Id;
    }
    
    inline ::System::Int32 model_schema::variableDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline HumanGUI::model_schema::variableRow^  model_schema::variableDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<HumanGUI::model_schema::variableRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void model_schema::variableDataTable::AddvariableRow(HumanGUI::model_schema::variableRow^  row) {
        this->Rows->Add(row);
    }
    
    inline HumanGUI::model_schema::variableRow^  model_schema::variableDataTable::AddvariableRow(
                System::Boolean constant, 
                System::String^  type, 
                System::String^  name, 
                System::String^  formula, 
                System::Single _value, 
                System::String^  units, 
                System::String^  description, 
                HumanGUI::model_schema::modelRow^  parentmodelRowBymodel_variable) {
        HumanGUI::model_schema::variableRow^  rowvariableRow = (cli::safe_cast<HumanGUI::model_schema::variableRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(9) {constant, type, name, 
            formula, _value, units, description, nullptr, nullptr};
        if (parentmodelRowBymodel_variable != nullptr) {
            columnValuesArray[8] = parentmodelRowBymodel_variable[2];
        }
        rowvariableRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowvariableRow);
        return rowvariableRow;
    }
    
    inline ::System::Collections::IEnumerator^  model_schema::variableDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  model_schema::variableDataTable::Clone() {
        HumanGUI::model_schema::variableDataTable^  cln = (cli::safe_cast<HumanGUI::model_schema::variableDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  model_schema::variableDataTable::CreateInstance() {
        return (gcnew HumanGUI::model_schema::variableDataTable());
    }
    
    inline ::System::Void model_schema::variableDataTable::InitVars() {
        this->columnconstant = __super::Columns[L"constant"];
        this->columntype = __super::Columns[L"type"];
        this->columnname = __super::Columns[L"name"];
        this->columnformula = __super::Columns[L"formula"];
        this->column_value = __super::Columns[L"value"];
        this->columnunits = __super::Columns[L"units"];
        this->columndescription = __super::Columns[L"description"];
        this->columnvariable_Id = __super::Columns[L"variable_Id"];
        this->columnmodel_Id = __super::Columns[L"model_Id"];
    }
    
    inline ::System::Void model_schema::variableDataTable::InitClass() {
        this->columnconstant = (gcnew ::System::Data::DataColumn(L"constant", ::System::Boolean::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnconstant);
        this->columntype = (gcnew ::System::Data::DataColumn(L"type", ::System::String::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columntype);
        this->columnname = (gcnew ::System::Data::DataColumn(L"name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnname);
        this->columnformula = (gcnew ::System::Data::DataColumn(L"formula", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnformula);
        this->column_value = (gcnew ::System::Data::DataColumn(L"value", ::System::Single::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->column_value);
        this->columnunits = (gcnew ::System::Data::DataColumn(L"units", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnunits);
        this->columndescription = (gcnew ::System::Data::DataColumn(L"description", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columndescription);
        this->columnvariable_Id = (gcnew ::System::Data::DataColumn(L"variable_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnvariable_Id);
        this->columnmodel_Id = (gcnew ::System::Data::DataColumn(L"model_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnmodel_Id);
        this->Constraints->Add((gcnew ::System::Data::UniqueConstraint(L"Constraint1", gcnew cli::array< ::System::Data::DataColumn^  >(1) {this->columnvariable_Id}, 
                true)));
        this->columnconstant->AllowDBNull = false;
        this->columnconstant->Namespace = L"";
        this->columntype->Namespace = L"";
        this->columnname->AllowDBNull = false;
        this->columnformula->AllowDBNull = false;
        this->column_value->AllowDBNull = false;
        this->columnvariable_Id->AutoIncrement = true;
        this->columnvariable_Id->AllowDBNull = false;
        this->columnvariable_Id->Unique = true;
    }
    
    inline HumanGUI::model_schema::variableRow^  model_schema::variableDataTable::NewvariableRow() {
        return (cli::safe_cast<HumanGUI::model_schema::variableRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  model_schema::variableDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew HumanGUI::model_schema::variableRow(builder));
    }
    
    inline ::System::Type^  model_schema::variableDataTable::GetRowType() {
        return HumanGUI::model_schema::variableRow::typeid;
    }
    
    inline ::System::Void model_schema::variableDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->variableRowChanged(this, (gcnew HumanGUI::model_schema::variableRowChangeEvent((cli::safe_cast<HumanGUI::model_schema::variableRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void model_schema::variableDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->variableRowChanging(this, (gcnew HumanGUI::model_schema::variableRowChangeEvent((cli::safe_cast<HumanGUI::model_schema::variableRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void model_schema::variableDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->variableRowDeleted(this, (gcnew HumanGUI::model_schema::variableRowChangeEvent((cli::safe_cast<HumanGUI::model_schema::variableRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void model_schema::variableDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->variableRowDeleting(this, (gcnew HumanGUI::model_schema::variableRowChangeEvent((cli::safe_cast<HumanGUI::model_schema::variableRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void model_schema::variableDataTable::RemovevariableRow(HumanGUI::model_schema::variableRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  model_schema::variableDataTable::GetTypedTableSchema(::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        HumanGUI::model_schema^  ds = (gcnew HumanGUI::model_schema());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"variableDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline model_schema::anatomical_structureDataTable::anatomical_structureDataTable() {
        this->TableName = L"anatomical_structure";
        this->BeginInit();
        this->InitClass();
        this->EndInit();
    }
    
    inline model_schema::anatomical_structureDataTable::anatomical_structureDataTable(::System::Data::DataTable^  table) {
        this->TableName = table->TableName;
        if (table->CaseSensitive != table->DataSet->CaseSensitive) {
            this->CaseSensitive = table->CaseSensitive;
        }
        if (table->Locale->ToString() != table->DataSet->Locale->ToString()) {
            this->Locale = table->Locale;
        }
        if (table->Namespace != table->DataSet->Namespace) {
            this->Namespace = table->Namespace;
        }
        this->Prefix = table->Prefix;
        this->MinimumCapacity = table->MinimumCapacity;
    }
    
    inline model_schema::anatomical_structureDataTable::anatomical_structureDataTable(::System::Runtime::Serialization::SerializationInfo^  info, 
                ::System::Runtime::Serialization::StreamingContext context) : 
            ::System::Data::DataTable(info, context) {
        this->InitVars();
    }
    
    inline ::System::Data::DataColumn^  model_schema::anatomical_structureDataTable::FMAIDColumn::get() {
        return this->columnFMAID;
    }
    
    inline ::System::Data::DataColumn^  model_schema::anatomical_structureDataTable::str_nameColumn::get() {
        return this->columnstr_name;
    }
    
    inline ::System::Data::DataColumn^  model_schema::anatomical_structureDataTable::variable_IdColumn::get() {
        return this->columnvariable_Id;
    }
    
    inline ::System::Int32 model_schema::anatomical_structureDataTable::Count::get() {
        return this->Rows->Count;
    }
    
    inline HumanGUI::model_schema::anatomical_structureRow^  model_schema::anatomical_structureDataTable::default::get(::System::Int32 index) {
        return (cli::safe_cast<HumanGUI::model_schema::anatomical_structureRow^  >(this->Rows[index]));
    }
    
    inline ::System::Void model_schema::anatomical_structureDataTable::Addanatomical_structureRow(HumanGUI::model_schema::anatomical_structureRow^  row) {
        this->Rows->Add(row);
    }
    
    inline HumanGUI::model_schema::anatomical_structureRow^  model_schema::anatomical_structureDataTable::Addanatomical_structureRow(
                System::Int32 FMAID, System::String^  str_name, HumanGUI::model_schema::variableRow^  parentvariableRowByvariable_anatomical_structure) {
        HumanGUI::model_schema::anatomical_structureRow^  rowanatomical_structureRow = (cli::safe_cast<HumanGUI::model_schema::anatomical_structureRow^  >(this->NewRow()));
        cli::array< ::System::Object^  >^  columnValuesArray = gcnew cli::array< ::System::Object^  >(3) {FMAID, str_name, nullptr};
        if (parentvariableRowByvariable_anatomical_structure != nullptr) {
            columnValuesArray[2] = parentvariableRowByvariable_anatomical_structure[7];
        }
        rowanatomical_structureRow->ItemArray = columnValuesArray;
        this->Rows->Add(rowanatomical_structureRow);
        return rowanatomical_structureRow;
    }
    
    inline ::System::Collections::IEnumerator^  model_schema::anatomical_structureDataTable::GetEnumerator() {
        return this->Rows->GetEnumerator();
    }
    
    inline ::System::Data::DataTable^  model_schema::anatomical_structureDataTable::Clone() {
        HumanGUI::model_schema::anatomical_structureDataTable^  cln = (cli::safe_cast<HumanGUI::model_schema::anatomical_structureDataTable^  >(__super::Clone()));
        cln->InitVars();
        return cln;
    }
    
    inline ::System::Data::DataTable^  model_schema::anatomical_structureDataTable::CreateInstance() {
        return (gcnew HumanGUI::model_schema::anatomical_structureDataTable());
    }
    
    inline ::System::Void model_schema::anatomical_structureDataTable::InitVars() {
        this->columnFMAID = __super::Columns[L"FMAID"];
        this->columnstr_name = __super::Columns[L"str_name"];
        this->columnvariable_Id = __super::Columns[L"variable_Id"];
    }
    
    inline ::System::Void model_schema::anatomical_structureDataTable::InitClass() {
        this->columnFMAID = (gcnew ::System::Data::DataColumn(L"FMAID", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Attribute));
        __super::Columns->Add(this->columnFMAID);
        this->columnstr_name = (gcnew ::System::Data::DataColumn(L"str_name", ::System::String::typeid, nullptr, ::System::Data::MappingType::Element));
        __super::Columns->Add(this->columnstr_name);
        this->columnvariable_Id = (gcnew ::System::Data::DataColumn(L"variable_Id", ::System::Int32::typeid, nullptr, ::System::Data::MappingType::Hidden));
        __super::Columns->Add(this->columnvariable_Id);
        this->columnFMAID->AllowDBNull = false;
        this->columnFMAID->Namespace = L"";
        this->columnstr_name->AllowDBNull = false;
    }
    
    inline HumanGUI::model_schema::anatomical_structureRow^  model_schema::anatomical_structureDataTable::Newanatomical_structureRow() {
        return (cli::safe_cast<HumanGUI::model_schema::anatomical_structureRow^  >(this->NewRow()));
    }
    
    inline ::System::Data::DataRow^  model_schema::anatomical_structureDataTable::NewRowFromBuilder(::System::Data::DataRowBuilder^  builder) {
        return (gcnew HumanGUI::model_schema::anatomical_structureRow(builder));
    }
    
    inline ::System::Type^  model_schema::anatomical_structureDataTable::GetRowType() {
        return HumanGUI::model_schema::anatomical_structureRow::typeid;
    }
    
    inline ::System::Void model_schema::anatomical_structureDataTable::OnRowChanged(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanged(e);
        {
            this->anatomical_structureRowChanged(this, (gcnew HumanGUI::model_schema::anatomical_structureRowChangeEvent((cli::safe_cast<HumanGUI::model_schema::anatomical_structureRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void model_schema::anatomical_structureDataTable::OnRowChanging(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowChanging(e);
        {
            this->anatomical_structureRowChanging(this, (gcnew HumanGUI::model_schema::anatomical_structureRowChangeEvent((cli::safe_cast<HumanGUI::model_schema::anatomical_structureRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void model_schema::anatomical_structureDataTable::OnRowDeleted(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleted(e);
        {
            this->anatomical_structureRowDeleted(this, (gcnew HumanGUI::model_schema::anatomical_structureRowChangeEvent((cli::safe_cast<HumanGUI::model_schema::anatomical_structureRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void model_schema::anatomical_structureDataTable::OnRowDeleting(::System::Data::DataRowChangeEventArgs^  e) {
        __super::OnRowDeleting(e);
        {
            this->anatomical_structureRowDeleting(this, (gcnew HumanGUI::model_schema::anatomical_structureRowChangeEvent((cli::safe_cast<HumanGUI::model_schema::anatomical_structureRow^  >(e->Row)), 
                    e->Action)));
        }
    }
    
    inline ::System::Void model_schema::anatomical_structureDataTable::Removeanatomical_structureRow(HumanGUI::model_schema::anatomical_structureRow^  row) {
        this->Rows->Remove(row);
    }
    
    inline ::System::Xml::Schema::XmlSchemaComplexType^  model_schema::anatomical_structureDataTable::GetTypedTableSchema(
                ::System::Xml::Schema::XmlSchemaSet^  xs) {
        ::System::Xml::Schema::XmlSchemaComplexType^  type = (gcnew ::System::Xml::Schema::XmlSchemaComplexType());
        ::System::Xml::Schema::XmlSchemaSequence^  sequence = (gcnew ::System::Xml::Schema::XmlSchemaSequence());
        HumanGUI::model_schema^  ds = (gcnew HumanGUI::model_schema());
        ::System::Xml::Schema::XmlSchemaAny^  any1 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any1->Namespace = L"http://www.w3.org/2001/XMLSchema";
        any1->MinOccurs = ::System::Decimal(0);
        any1->MaxOccurs = ::System::Decimal::MaxValue;
        any1->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any1);
        ::System::Xml::Schema::XmlSchemaAny^  any2 = (gcnew ::System::Xml::Schema::XmlSchemaAny());
        any2->Namespace = L"urn:schemas-microsoft-com:xml-diffgram-v1";
        any2->MinOccurs = ::System::Decimal(1);
        any2->ProcessContents = ::System::Xml::Schema::XmlSchemaContentProcessing::Lax;
        sequence->Items->Add(any2);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute1 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute1->Name = L"namespace";
        attribute1->FixedValue = ds->Namespace;
        type->Attributes->Add(attribute1);
        ::System::Xml::Schema::XmlSchemaAttribute^  attribute2 = (gcnew ::System::Xml::Schema::XmlSchemaAttribute());
        attribute2->Name = L"tableTypeName";
        attribute2->FixedValue = L"anatomical_structureDataTable";
        type->Attributes->Add(attribute2);
        type->Particle = sequence;
        ::System::Xml::Schema::XmlSchema^  dsSchema = ds->GetSchemaSerializable();
        if (xs->Contains(dsSchema->TargetNamespace)) {
            ::System::IO::MemoryStream^  s1 = (gcnew ::System::IO::MemoryStream());
            ::System::IO::MemoryStream^  s2 = (gcnew ::System::IO::MemoryStream());
            try {
                ::System::Xml::Schema::XmlSchema^  schema = nullptr;
                dsSchema->Write(s1);
                for (                ::System::Collections::IEnumerator^  schemas = xs->Schemas(dsSchema->TargetNamespace)->GetEnumerator(); schemas->MoveNext();                 ) {
                    schema = (cli::safe_cast<::System::Xml::Schema::XmlSchema^  >(schemas->Current));
                    s2->SetLength(0);
                    schema->Write(s2);
                    if (s1->Length == s2->Length) {
                        s1->Position = 0;
                        s2->Position = 0;
                        for (                        ; ((s1->Position != s1->Length) 
                                    && (s1->ReadByte() == s2->ReadByte()));                         ) {
                            ;
                        }
                        if (s1->Position == s1->Length) {
                            return type;
                        }
                    }
                }
            }
            finally {
                if (s1 != nullptr) {
                    s1->Close();
                }
                if (s2 != nullptr) {
                    s2->Close();
                }
            }
        }
        xs->Add(dsSchema);
        return type;
    }
    
    
    inline model_schema::modelRow::modelRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablemodel = (cli::safe_cast<HumanGUI::model_schema::modelDataTable^  >(this->Table));
    }
    
    inline System::String^  model_schema::modelRow::model_name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablemodel->model_nameColumn]));
    }
    inline System::Void model_schema::modelRow::model_name::set(System::String^  value) {
        this[this->tablemodel->model_nameColumn] = value;
    }
    
    inline System::String^  model_schema::modelRow::description::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablemodel->descriptionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'description\' in table \'model\' is DBNull.", 
                e));
        }
    }
    inline System::Void model_schema::modelRow::description::set(System::String^  value) {
        this[this->tablemodel->descriptionColumn] = value;
    }
    
    inline System::Int32 model_schema::modelRow::model_Id::get() {
        return (*cli::safe_cast<::System::Int32^>(this[this->tablemodel->model_IdColumn]));
    }
    inline System::Void model_schema::modelRow::model_Id::set(System::Int32 value) {
        this[this->tablemodel->model_IdColumn] = value;
    }
    
    inline ::System::Boolean model_schema::modelRow::IsdescriptionNull() {
        return this->IsNull(this->tablemodel->descriptionColumn);
    }
    
    inline ::System::Void model_schema::modelRow::SetdescriptionNull() {
        this[this->tablemodel->descriptionColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< HumanGUI::model_schema::variableRow^  >^  model_schema::modelRow::GetvariableRows() {
        if (this->Table->ChildRelations[L"model_variable"] == nullptr) {
            return gcnew cli::array< HumanGUI::model_schema::variableRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< HumanGUI::model_schema::variableRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"model_variable"])));
        }
    }
    
    
    inline model_schema::variableRow::variableRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tablevariable = (cli::safe_cast<HumanGUI::model_schema::variableDataTable^  >(this->Table));
    }
    
    inline System::Boolean model_schema::variableRow::constant::get() {
        return (*cli::safe_cast<::System::Boolean^>(this[this->tablevariable->constantColumn]));
    }
    inline System::Void model_schema::variableRow::constant::set(System::Boolean value) {
        this[this->tablevariable->constantColumn] = value;
    }
    
    inline System::String^  model_schema::variableRow::type::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablevariable->typeColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'type\' in table \'variable\' is DBNull.", 
                e));
        }
    }
    inline System::Void model_schema::variableRow::type::set(System::String^  value) {
        this[this->tablevariable->typeColumn] = value;
    }
    
    inline System::String^  model_schema::variableRow::name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablevariable->nameColumn]));
    }
    inline System::Void model_schema::variableRow::name::set(System::String^  value) {
        this[this->tablevariable->nameColumn] = value;
    }
    
    inline System::String^  model_schema::variableRow::formula::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tablevariable->formulaColumn]));
    }
    inline System::Void model_schema::variableRow::formula::set(System::String^  value) {
        this[this->tablevariable->formulaColumn] = value;
    }
    
    inline System::Single model_schema::variableRow::_value::get() {
        return (*cli::safe_cast<::System::Single^>(this[this->tablevariable->_valueColumn]));
    }
    inline System::Void model_schema::variableRow::_value::set(System::Single value) {
        this[this->tablevariable->_valueColumn] = value;
    }
    
    inline System::String^  model_schema::variableRow::units::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablevariable->unitsColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'units\' in table \'variable\' is DBNull.", 
                e));
        }
    }
    inline System::Void model_schema::variableRow::units::set(System::String^  value) {
        this[this->tablevariable->unitsColumn] = value;
    }
    
    inline System::String^  model_schema::variableRow::description::get() {
        try {
            return (cli::safe_cast<::System::String^  >(this[this->tablevariable->descriptionColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'description\' in table \'variable\' is DBNull.", 
                e));
        }
    }
    inline System::Void model_schema::variableRow::description::set(System::String^  value) {
        this[this->tablevariable->descriptionColumn] = value;
    }
    
    inline System::Int32 model_schema::variableRow::variable_Id::get() {
        return (*cli::safe_cast<::System::Int32^>(this[this->tablevariable->variable_IdColumn]));
    }
    inline System::Void model_schema::variableRow::variable_Id::set(System::Int32 value) {
        this[this->tablevariable->variable_IdColumn] = value;
    }
    
    inline System::Int32 model_schema::variableRow::model_Id::get() {
        try {
            return (*cli::safe_cast<::System::Int32^>(this[this->tablevariable->model_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'model_Id\' in table \'variable\' is DBNull.", 
                e));
        }
    }
    inline System::Void model_schema::variableRow::model_Id::set(System::Int32 value) {
        this[this->tablevariable->model_IdColumn] = value;
    }
    
    inline HumanGUI::model_schema::modelRow^  model_schema::variableRow::modelRow::get() {
        return (cli::safe_cast<HumanGUI::model_schema::modelRow^  >(this->GetParentRow(this->Table->ParentRelations[L"model_variable"])));
    }
    inline System::Void model_schema::variableRow::modelRow::set(HumanGUI::model_schema::modelRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"model_variable"]);
    }
    
    inline ::System::Boolean model_schema::variableRow::IstypeNull() {
        return this->IsNull(this->tablevariable->typeColumn);
    }
    
    inline ::System::Void model_schema::variableRow::SettypeNull() {
        this[this->tablevariable->typeColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean model_schema::variableRow::IsunitsNull() {
        return this->IsNull(this->tablevariable->unitsColumn);
    }
    
    inline ::System::Void model_schema::variableRow::SetunitsNull() {
        this[this->tablevariable->unitsColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean model_schema::variableRow::IsdescriptionNull() {
        return this->IsNull(this->tablevariable->descriptionColumn);
    }
    
    inline ::System::Void model_schema::variableRow::SetdescriptionNull() {
        this[this->tablevariable->descriptionColumn] = ::System::Convert::DBNull;
    }
    
    inline ::System::Boolean model_schema::variableRow::Ismodel_IdNull() {
        return this->IsNull(this->tablevariable->model_IdColumn);
    }
    
    inline ::System::Void model_schema::variableRow::Setmodel_IdNull() {
        this[this->tablevariable->model_IdColumn] = ::System::Convert::DBNull;
    }
    
    inline cli::array< HumanGUI::model_schema::anatomical_structureRow^  >^  model_schema::variableRow::Getanatomical_structureRows() {
        if (this->Table->ChildRelations[L"variable_anatomical_structure"] == nullptr) {
            return gcnew cli::array< HumanGUI::model_schema::anatomical_structureRow^  >(0);
        }
        else {
            return (cli::safe_cast<cli::array< HumanGUI::model_schema::anatomical_structureRow^  >^  >(__super::GetChildRows(this->Table->ChildRelations[L"variable_anatomical_structure"])));
        }
    }
    
    
    inline model_schema::anatomical_structureRow::anatomical_structureRow(::System::Data::DataRowBuilder^  rb) : 
            ::System::Data::DataRow(rb) {
        this->tableanatomical_structure = (cli::safe_cast<HumanGUI::model_schema::anatomical_structureDataTable^  >(this->Table));
    }
    
    inline System::Int32 model_schema::anatomical_structureRow::FMAID::get() {
        return (*cli::safe_cast<::System::Int32^>(this[this->tableanatomical_structure->FMAIDColumn]));
    }
    inline System::Void model_schema::anatomical_structureRow::FMAID::set(System::Int32 value) {
        this[this->tableanatomical_structure->FMAIDColumn] = value;
    }
    
    inline System::String^  model_schema::anatomical_structureRow::str_name::get() {
        return (cli::safe_cast<::System::String^  >(this[this->tableanatomical_structure->str_nameColumn]));
    }
    inline System::Void model_schema::anatomical_structureRow::str_name::set(System::String^  value) {
        this[this->tableanatomical_structure->str_nameColumn] = value;
    }
    
    inline System::Int32 model_schema::anatomical_structureRow::variable_Id::get() {
        try {
            return (*cli::safe_cast<::System::Int32^>(this[this->tableanatomical_structure->variable_IdColumn]));
        }
        catch (::System::InvalidCastException^ e) {
            throw (gcnew ::System::Data::StrongTypingException(L"The value for column \'variable_Id\' in table \'anatomical_structure\' is DBNull.", 
                e));
        }
    }
    inline System::Void model_schema::anatomical_structureRow::variable_Id::set(System::Int32 value) {
        this[this->tableanatomical_structure->variable_IdColumn] = value;
    }
    
    inline HumanGUI::model_schema::variableRow^  model_schema::anatomical_structureRow::variableRow::get() {
        return (cli::safe_cast<HumanGUI::model_schema::variableRow^  >(this->GetParentRow(this->Table->ParentRelations[L"variable_anatomical_structure"])));
    }
    inline System::Void model_schema::anatomical_structureRow::variableRow::set(HumanGUI::model_schema::variableRow^  value) {
        this->SetParentRow(value, this->Table->ParentRelations[L"variable_anatomical_structure"]);
    }
    
    inline ::System::Boolean model_schema::anatomical_structureRow::Isvariable_IdNull() {
        return this->IsNull(this->tableanatomical_structure->variable_IdColumn);
    }
    
    inline ::System::Void model_schema::anatomical_structureRow::Setvariable_IdNull() {
        this[this->tableanatomical_structure->variable_IdColumn] = ::System::Convert::DBNull;
    }
    
    
    inline model_schema::modelRowChangeEvent::modelRowChangeEvent(HumanGUI::model_schema::modelRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline HumanGUI::model_schema::modelRow^  model_schema::modelRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction model_schema::modelRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline model_schema::variableRowChangeEvent::variableRowChangeEvent(HumanGUI::model_schema::variableRow^  row, ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline HumanGUI::model_schema::variableRow^  model_schema::variableRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction model_schema::variableRowChangeEvent::Action::get() {
        return this->eventAction;
    }
    
    
    inline model_schema::anatomical_structureRowChangeEvent::anatomical_structureRowChangeEvent(HumanGUI::model_schema::anatomical_structureRow^  row, 
                ::System::Data::DataRowAction action) {
        this->eventRow = row;
        this->eventAction = action;
    }
    
    inline HumanGUI::model_schema::anatomical_structureRow^  model_schema::anatomical_structureRowChangeEvent::Row::get() {
        return this->eventRow;
    }
    
    inline ::System::Data::DataRowAction model_schema::anatomical_structureRowChangeEvent::Action::get() {
        return this->eventAction;
    }
}
